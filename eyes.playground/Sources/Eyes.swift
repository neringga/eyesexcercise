//
//  Eyes.swift
//  Eyes
//
//  Created by Neringa on 2021-04-04.
//  Copyright Â© 2021 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//

import UIKit

public class Eyes : NSObject {
    
    @objc dynamic public class func drawClosedEyes(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 869, height: 522), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        guard let context = UIGraphicsGetCurrentContext() else {
            fatalError("Context not found")
        }
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 869, height: 522), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 869, y: resizedFrame.height / 522)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 869, resizedFrame.height / 522)


        //// Color Declarations
        let brows = UIColor(red: 0.533, green: 0.412, blue: 0.272, alpha: 1.000)
        let sKinColor = UIColor(red: 0.976, green: 0.940, blue: 0.815, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 6

        //// Main
        //// Base contour Drawing
        let baseContourPath = UIBezierPath()
        baseContourPath.move(to: CGPoint(x: 579.5, y: 172.5))
        baseContourPath.addCurve(to: CGPoint(x: 452.5, y: 237.91), controlPoint1: CGPoint(x: 501.63, y: 172.5), controlPoint2: CGPoint(x: 452.5, y: 237.91))
        baseContourPath.addCurve(to: CGPoint(x: 579.5, y: 304.5), controlPoint1: CGPoint(x: 452.5, y: 237.91), controlPoint2: CGPoint(x: 501.63, y: 304.5))
        baseContourPath.addCurve(to: CGPoint(x: 743.5, y: 237.91), controlPoint1: CGPoint(x: 657.37, y: 304.5), controlPoint2: CGPoint(x: 743.5, y: 255.74))
        baseContourPath.addCurve(to: CGPoint(x: 673.85, y: 189.45), controlPoint1: CGPoint(x: 743.5, y: 228.38), controlPoint2: CGPoint(x: 702.49, y: 201.53))
        baseContourPath.addCurve(to: CGPoint(x: 579.5, y: 172.5), controlPoint1: CGPoint(x: 648.86, y: 178.91), controlPoint2: CGPoint(x: 615.78, y: 172.5))
        baseContourPath.close()
        baseContourPath.move(to: CGPoint(x: 250.5, y: 172.5))
        baseContourPath.addCurve(to: CGPoint(x: 156.15, y: 189.45), controlPoint1: CGPoint(x: 214.22, y: 172.5), controlPoint2: CGPoint(x: 181.14, y: 178.91))
        baseContourPath.addCurve(to: CGPoint(x: 86.5, y: 237.91), controlPoint1: CGPoint(x: 127.51, y: 201.53), controlPoint2: CGPoint(x: 86.5, y: 228.38))
        baseContourPath.addCurve(to: CGPoint(x: 250.5, y: 304.5), controlPoint1: CGPoint(x: 86.5, y: 255.74), controlPoint2: CGPoint(x: 172.63, y: 304.5))
        baseContourPath.addCurve(to: CGPoint(x: 377.5, y: 237.91), controlPoint1: CGPoint(x: 328.37, y: 304.5), controlPoint2: CGPoint(x: 377.5, y: 237.91))
        baseContourPath.addCurve(to: CGPoint(x: 278.94, y: 175.44), controlPoint1: CGPoint(x: 377.5, y: 237.91), controlPoint2: CGPoint(x: 340.14, y: 188.17))
        baseContourPath.addCurve(to: CGPoint(x: 250.5, y: 172.5), controlPoint1: CGPoint(x: 269.96, y: 173.57), controlPoint2: CGPoint(x: 260.46, y: 172.5))
        baseContourPath.close()
        baseContourPath.move(to: CGPoint(x: 817, y: 38))
        baseContourPath.addCurve(to: CGPoint(x: 817, y: 483), controlPoint1: CGPoint(x: 817, y: 38), controlPoint2: CGPoint(x: 817, y: 483))
        baseContourPath.addLine(to: CGPoint(x: 24, y: 483))
        baseContourPath.addLine(to: CGPoint(x: 24, y: 38))
        baseContourPath.addLine(to: CGPoint(x: 817, y: 38))
        baseContourPath.addLine(to: CGPoint(x: 817, y: 38))
        baseContourPath.close()
        sKinColor.setFill()
        baseContourPath.fill()

        //// Left Eye contour 2 Drawing
        let leftEyeContour2Path = UIBezierPath()
        leftEyeContour2Path.move(to: CGPoint(x: 378.5, y: 236.66))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 251.5, y: 303), controlPoint1: CGPoint(x: 378.5, y: 236.66), controlPoint2: CGPoint(x: 329.37, y: 303))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 87.5, y: 236.66), controlPoint1: CGPoint(x: 173.63, y: 303), controlPoint2: CGPoint(x: 87.5, y: 254.43))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 157.15, y: 188.39), controlPoint1: CGPoint(x: 87.5, y: 227.17), controlPoint2: CGPoint(x: 128.51, y: 200.42))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 251.5, y: 171.5), controlPoint1: CGPoint(x: 182.14, y: 177.89), controlPoint2: CGPoint(x: 215.22, y: 171.5))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 378.5, y: 236.66), controlPoint1: CGPoint(x: 329.37, y: 171.5), controlPoint2: CGPoint(x: 378.5, y: 236.66))
        leftEyeContour2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        leftEyeContour2Path.lineWidth = 1
        leftEyeContour2Path.stroke()
        context.restoreGState()


        //// Eye contour 2 Drawing
        let eyeContour2Path = UIBezierPath()
        eyeContour2Path.move(to: CGPoint(x: 451.5, y: 237.41))
        eyeContour2Path.addCurve(to: CGPoint(x: 578.5, y: 304), controlPoint1: CGPoint(x: 451.5, y: 237.41), controlPoint2: CGPoint(x: 500.63, y: 304))
        eyeContour2Path.addCurve(to: CGPoint(x: 742.5, y: 237.41), controlPoint1: CGPoint(x: 656.37, y: 304), controlPoint2: CGPoint(x: 742.5, y: 255.24))
        eyeContour2Path.addCurve(to: CGPoint(x: 672.85, y: 188.95), controlPoint1: CGPoint(x: 742.5, y: 227.88), controlPoint2: CGPoint(x: 701.49, y: 201.03))
        eyeContour2Path.addCurve(to: CGPoint(x: 578.5, y: 172), controlPoint1: CGPoint(x: 647.86, y: 178.41), controlPoint2: CGPoint(x: 614.78, y: 172))
        eyeContour2Path.addCurve(to: CGPoint(x: 451.5, y: 237.41), controlPoint1: CGPoint(x: 500.63, y: 172), controlPoint2: CGPoint(x: 451.5, y: 237.41))
        eyeContour2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        eyeContour2Path.lineWidth = 1
        eyeContour2Path.stroke()
        context.restoreGState()


        //// Eye contour Drawing
        let eyeContourPath = UIBezierPath()
        eyeContourPath.move(to: CGPoint(x: 452, y: 234.41))
        eyeContourPath.addCurve(to: CGPoint(x: 579, y: 301), controlPoint1: CGPoint(x: 452, y: 234.41), controlPoint2: CGPoint(x: 501.13, y: 301))
        eyeContourPath.addCurve(to: CGPoint(x: 743, y: 234.41), controlPoint1: CGPoint(x: 656.87, y: 301), controlPoint2: CGPoint(x: 743, y: 252.24))
        eyeContourPath.addCurve(to: CGPoint(x: 673.35, y: 185.95), controlPoint1: CGPoint(x: 743, y: 224.88), controlPoint2: CGPoint(x: 701.99, y: 198.03))
        eyeContourPath.addCurve(to: CGPoint(x: 579, y: 169), controlPoint1: CGPoint(x: 648.36, y: 175.41), controlPoint2: CGPoint(x: 615.28, y: 169))
        eyeContourPath.addCurve(to: CGPoint(x: 452, y: 234.41), controlPoint1: CGPoint(x: 501.13, y: 169), controlPoint2: CGPoint(x: 452, y: 234.41))
        eyeContourPath.close()
        sKinColor.setFill()
        eyeContourPath.fill()


        //// Left Eye contour Drawing
        let leftEyeContourPath = UIBezierPath()
        leftEyeContourPath.move(to: CGPoint(x: 378.5, y: 233.66))
        leftEyeContourPath.addCurve(to: CGPoint(x: 251.5, y: 300), controlPoint1: CGPoint(x: 378.5, y: 233.66), controlPoint2: CGPoint(x: 329.37, y: 300))
        leftEyeContourPath.addCurve(to: CGPoint(x: 87.5, y: 233.66), controlPoint1: CGPoint(x: 173.63, y: 300), controlPoint2: CGPoint(x: 87.5, y: 251.43))
        leftEyeContourPath.addCurve(to: CGPoint(x: 157.15, y: 185.39), controlPoint1: CGPoint(x: 87.5, y: 224.17), controlPoint2: CGPoint(x: 128.51, y: 197.42))
        leftEyeContourPath.addCurve(to: CGPoint(x: 251.5, y: 168.5), controlPoint1: CGPoint(x: 182.14, y: 174.89), controlPoint2: CGPoint(x: 215.22, y: 168.5))
        leftEyeContourPath.addCurve(to: CGPoint(x: 378.5, y: 233.66), controlPoint1: CGPoint(x: 329.37, y: 168.5), controlPoint2: CGPoint(x: 378.5, y: 233.66))
        leftEyeContourPath.close()
        sKinColor.setFill()
        leftEyeContourPath.fill()




        //// Right eyebrow Drawing
        let rightEyebrowPath = UIBezierPath()
        rightEyebrowPath.move(to: CGPoint(x: 459.5, y: 152.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 654.5, y: 125.5), controlPoint1: CGPoint(x: 459.5, y: 152.5), controlPoint2: CGPoint(x: 574.75, y: 120.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 778.5, y: 172.5), controlPoint1: CGPoint(x: 734.25, y: 130.5), controlPoint2: CGPoint(x: 778.5, y: 172.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 654.5, y: 105.5), controlPoint1: CGPoint(x: 778.5, y: 172.5), controlPoint2: CGPoint(x: 734.25, y: 114.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 459.5, y: 136.5), controlPoint1: CGPoint(x: 574.75, y: 96.5), controlPoint2: CGPoint(x: 459.5, y: 136.5))
        rightEyebrowPath.addLine(to: CGPoint(x: 459.5, y: 152.5))
        rightEyebrowPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        brows.setFill()
        rightEyebrowPath.fill()
        context.restoreGState()

        brows.setStroke()
        rightEyebrowPath.lineWidth = 1
        rightEyebrowPath.stroke()


        //// Left eyebrow Drawing
        let leftEyebrowPath = UIBezierPath()
        leftEyebrowPath.move(to: CGPoint(x: 374.5, y: 152.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 179.5, y: 125.5), controlPoint1: CGPoint(x: 374.5, y: 152.5), controlPoint2: CGPoint(x: 259.25, y: 120.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 55.5, y: 172.5), controlPoint1: CGPoint(x: 99.75, y: 130.5), controlPoint2: CGPoint(x: 55.5, y: 172.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 179.5, y: 105.5), controlPoint1: CGPoint(x: 55.5, y: 172.5), controlPoint2: CGPoint(x: 99.75, y: 114.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 374.5, y: 136.5), controlPoint1: CGPoint(x: 259.25, y: 96.5), controlPoint2: CGPoint(x: 374.5, y: 136.5))
        leftEyebrowPath.addLine(to: CGPoint(x: 374.5, y: 152.5))
        leftEyebrowPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        brows.setFill()
        leftEyebrowPath.fill()
        context.restoreGState()

        brows.setStroke()
        leftEyebrowPath.lineWidth = 1
        leftEyebrowPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEyes(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 869, height: 522),
                                             resizing: ResizingBehavior = .aspectFit,
                                             left_eye_x: CGFloat = 188,
                                             right_eye_x: CGFloat = 544,
                                             left_eye_y: CGFloat = 188,
                                             right_eye_y: CGFloat = 188) {
        
        guard let context = UIGraphicsGetCurrentContext() else {
            fatalError("Context not found")
        }
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 869, height: 522), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 869, y: resizedFrame.height / 522)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 869, resizedFrame.height / 522)


        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let eyesColor = UIColor(red: 0.387, green: 0.734, blue: 0.841, alpha: 1.000)
        let dirtyWhite = UIColor(red: 0.923, green: 0.942, blue: 0.937, alpha: 1.000)
        let brows = UIColor(red: 0.533, green: 0.412, blue: 0.272, alpha: 1.000)
        let sKinColor = UIColor(red: 0.976, green: 0.940, blue: 0.815, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 6
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.lightGray
        shadow2.shadowOffset = CGSize(width: -1, height: 0)
        shadow2.shadowBlurRadius = 5
        
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 378.5, y: 236.66))
        background.addCurve(to: CGPoint(x: 251.5, y: 303), controlPoint1: CGPoint(x: 378.5, y: 236.66), controlPoint2: CGPoint(x: 329.37, y: 303))
        background.addCurve(to: CGPoint(x: 87.5, y: 236.66), controlPoint1: CGPoint(x: 173.63, y: 303), controlPoint2: CGPoint(x: 87.5, y: 254.43))
        background.addCurve(to: CGPoint(x: 157.15, y: 188.39), controlPoint1: CGPoint(x: 87.5, y: 227.17), controlPoint2: CGPoint(x: 128.51, y: 200.42))
        background.addCurve(to: CGPoint(x: 251.5, y: 171.5), controlPoint1: CGPoint(x: 182.14, y: 177.89), controlPoint2: CGPoint(x: 215.22, y: 171.5))
        background.addCurve(to: CGPoint(x: 378.5, y: 236.66), controlPoint1: CGPoint(x: 329.37, y: 171.5), controlPoint2: CGPoint(x: 378.5, y: 236.66))
        background.close()
        dirtyWhite.setFill()
        background.fill()
        
        let background2 = UIBezierPath()
        background2.move(to: CGPoint(x: 451.5, y: 237.41))
        background2.addCurve(to: CGPoint(x: 578.5, y: 304), controlPoint1: CGPoint(x: 451.5, y: 237.41), controlPoint2: CGPoint(x: 500.63, y: 304))
        background2.addCurve(to: CGPoint(x: 742.5, y: 237.41), controlPoint1: CGPoint(x: 656.37, y: 304), controlPoint2: CGPoint(x: 742.5, y: 255.24))
        background2.addCurve(to: CGPoint(x: 672.85, y: 188.95), controlPoint1: CGPoint(x: 742.5, y: 227.88), controlPoint2: CGPoint(x: 701.49, y: 201.03))
        background2.addCurve(to: CGPoint(x: 578.5, y: 172), controlPoint1: CGPoint(x: 647.86, y: 178.41), controlPoint2: CGPoint(x: 614.78, y: 172))
        background2.addCurve(to: CGPoint(x: 451.5, y: 237.41), controlPoint1: CGPoint(x: 500.63, y: 172), controlPoint2: CGPoint(x: 451.5, y: 237.41))
        background2.close()
        dirtyWhite.setFill()
        background2.fill()

        //// Right Eye lense
        context.saveGState()
        context.translateBy(x: right_eye_x, y: right_eye_y)

        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Right Lens
        //// Right Lens 2 Drawing
        let rightLens2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 103, height: 94))
        eyesColor.setFill()
        rightLens2Path.fill()




        //// Right pupil Drawing
        let rightPupilPath = UIBezierPath(ovalIn: CGRect(x: 30, y: 28, width: 42, height: 38))
        color2.setFill()
        rightPupilPath.fill()


        //// Right Reflection Drawing
        context.saveGState()
        context.setAlpha(0.8)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let rightReflectionPath = UIBezierPath(ovalIn: CGRect(x: 69, y: 47, width: 17.5, height: 5))
        dirtyWhite.setFill()
        rightReflectionPath.fill()
        dirtyWhite.setStroke()
        rightReflectionPath.lineWidth = 1
        rightReflectionPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Right Reflection 2 Drawing
        context.saveGState()
        context.setAlpha(0.8)

        let rightReflection2Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 60, width: 11, height: 11))
        dirtyWhite.setFill()
        rightReflection2Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Left Eye lense
        context.saveGState()
        context.translateBy(x: left_eye_x, y: left_eye_y)

        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Left Lens 3
        //// Left Lens 4 Drawing
        let leftLens4Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 103, height: 94))
        eyesColor.setFill()
        leftLens4Path.fill()




        //// Left pupil 2 Drawing
        let leftPupil2Path = UIBezierPath(ovalIn: CGRect(x: 31, y: 28, width: 42, height: 38))
        color2.setFill()
        leftPupil2Path.fill()


        //// Left Reflection 3 Drawing
        context.saveGState()
        context.setAlpha(0.8)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let leftReflection3Path = UIBezierPath(ovalIn: CGRect(x: 16.5, y: 47, width: 17.5, height: 5))
        dirtyWhite.setFill()
        leftReflection3Path.fill()
        dirtyWhite.setStroke()
        leftReflection3Path.lineWidth = 1
        leftReflection3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Left Reflection 4 Drawing
        context.saveGState()
        context.setAlpha(0.8)

        let leftReflection4Path = UIBezierPath(ovalIn: CGRect(x: 73, y: 60, width: 11, height: 11))
        dirtyWhite.setFill()
        leftReflection4Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Main
        //// Base contour Drawing
        let baseContourPath = UIBezierPath()
        baseContourPath.move(to: CGPoint(x: 579.5, y: 172.5))
        baseContourPath.addCurve(to: CGPoint(x: 452.5, y: 237.91), controlPoint1: CGPoint(x: 501.63, y: 172.5), controlPoint2: CGPoint(x: 452.5, y: 237.91))
        baseContourPath.addCurve(to: CGPoint(x: 579.5, y: 304.5), controlPoint1: CGPoint(x: 452.5, y: 237.91), controlPoint2: CGPoint(x: 501.63, y: 304.5))
        baseContourPath.addCurve(to: CGPoint(x: 743.5, y: 237.91), controlPoint1: CGPoint(x: 657.37, y: 304.5), controlPoint2: CGPoint(x: 743.5, y: 255.74))
        baseContourPath.addCurve(to: CGPoint(x: 673.85, y: 189.45), controlPoint1: CGPoint(x: 743.5, y: 228.38), controlPoint2: CGPoint(x: 702.49, y: 201.53))
        baseContourPath.addCurve(to: CGPoint(x: 579.5, y: 172.5), controlPoint1: CGPoint(x: 648.86, y: 178.91), controlPoint2: CGPoint(x: 615.78, y: 172.5))
        baseContourPath.close()
        baseContourPath.move(to: CGPoint(x: 250.5, y: 172.5))
        baseContourPath.addCurve(to: CGPoint(x: 156.15, y: 189.45), controlPoint1: CGPoint(x: 214.22, y: 172.5), controlPoint2: CGPoint(x: 181.14, y: 178.91))
        baseContourPath.addCurve(to: CGPoint(x: 86.5, y: 237.91), controlPoint1: CGPoint(x: 127.51, y: 201.53), controlPoint2: CGPoint(x: 86.5, y: 228.38))
        baseContourPath.addCurve(to: CGPoint(x: 250.5, y: 304.5), controlPoint1: CGPoint(x: 86.5, y: 255.74), controlPoint2: CGPoint(x: 172.63, y: 304.5))
        baseContourPath.addCurve(to: CGPoint(x: 377.5, y: 237.91), controlPoint1: CGPoint(x: 328.37, y: 304.5), controlPoint2: CGPoint(x: 377.5, y: 237.91))
        baseContourPath.addCurve(to: CGPoint(x: 278.94, y: 175.44), controlPoint1: CGPoint(x: 377.5, y: 237.91), controlPoint2: CGPoint(x: 340.14, y: 188.17))
        baseContourPath.addCurve(to: CGPoint(x: 250.5, y: 172.5), controlPoint1: CGPoint(x: 269.96, y: 173.57), controlPoint2: CGPoint(x: 260.46, y: 172.5))
        baseContourPath.close()
        baseContourPath.move(to: CGPoint(x: 817, y: 38))
        baseContourPath.addCurve(to: CGPoint(x: 817, y: 483), controlPoint1: CGPoint(x: 817, y: 38), controlPoint2: CGPoint(x: 817, y: 483))
        baseContourPath.addLine(to: CGPoint(x: 24, y: 483))
        baseContourPath.addLine(to: CGPoint(x: 24, y: 38))
        baseContourPath.addLine(to: CGPoint(x: 817, y: 38))
        baseContourPath.addLine(to: CGPoint(x: 817, y: 38))
        baseContourPath.close()
        sKinColor.setFill()
        baseContourPath.fill()


        //// Left Eye contour 2 Drawing
        let leftEyeContour2Path = UIBezierPath()
        leftEyeContour2Path.move(to: CGPoint(x: 378.5, y: 236.66))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 251.5, y: 303), controlPoint1: CGPoint(x: 378.5, y: 236.66), controlPoint2: CGPoint(x: 329.37, y: 303))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 87.5, y: 236.66), controlPoint1: CGPoint(x: 173.63, y: 303), controlPoint2: CGPoint(x: 87.5, y: 254.43))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 157.15, y: 188.39), controlPoint1: CGPoint(x: 87.5, y: 227.17), controlPoint2: CGPoint(x: 128.51, y: 200.42))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 251.5, y: 171.5), controlPoint1: CGPoint(x: 182.14, y: 177.89), controlPoint2: CGPoint(x: 215.22, y: 171.5))
        leftEyeContour2Path.addCurve(to: CGPoint(x: 378.5, y: 236.66), controlPoint1: CGPoint(x: 329.37, y: 171.5), controlPoint2: CGPoint(x: 378.5, y: 236.66))
        leftEyeContour2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        leftEyeContour2Path.lineWidth = 1
        leftEyeContour2Path.stroke()
        context.restoreGState()


        //// Eye contour 2 Drawing
        let eyeContour2Path = UIBezierPath()
        eyeContour2Path.move(to: CGPoint(x: 451.5, y: 237.41))
        eyeContour2Path.addCurve(to: CGPoint(x: 578.5, y: 304), controlPoint1: CGPoint(x: 451.5, y: 237.41), controlPoint2: CGPoint(x: 500.63, y: 304))
        eyeContour2Path.addCurve(to: CGPoint(x: 742.5, y: 237.41), controlPoint1: CGPoint(x: 656.37, y: 304), controlPoint2: CGPoint(x: 742.5, y: 255.24))
        eyeContour2Path.addCurve(to: CGPoint(x: 672.85, y: 188.95), controlPoint1: CGPoint(x: 742.5, y: 227.88), controlPoint2: CGPoint(x: 701.49, y: 201.03))
        eyeContour2Path.addCurve(to: CGPoint(x: 578.5, y: 172), controlPoint1: CGPoint(x: 647.86, y: 178.41), controlPoint2: CGPoint(x: 614.78, y: 172))
        eyeContour2Path.addCurve(to: CGPoint(x: 451.5, y: 237.41), controlPoint1: CGPoint(x: 500.63, y: 172), controlPoint2: CGPoint(x: 451.5, y: 237.41))
        eyeContour2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        eyeContour2Path.lineWidth = 1
        eyeContour2Path.stroke()
        context.restoreGState()




        //// Right eyebrow Drawing
        let rightEyebrowPath = UIBezierPath()
        rightEyebrowPath.move(to: CGPoint(x: 459.5, y: 152.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 654.5, y: 125.5), controlPoint1: CGPoint(x: 459.5, y: 152.5), controlPoint2: CGPoint(x: 574.75, y: 120.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 778.5, y: 172.5), controlPoint1: CGPoint(x: 734.25, y: 130.5), controlPoint2: CGPoint(x: 778.5, y: 172.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 654.5, y: 105.5), controlPoint1: CGPoint(x: 778.5, y: 172.5), controlPoint2: CGPoint(x: 734.25, y: 114.5))
        rightEyebrowPath.addCurve(to: CGPoint(x: 459.5, y: 136.5), controlPoint1: CGPoint(x: 574.75, y: 96.5), controlPoint2: CGPoint(x: 459.5, y: 136.5))
        rightEyebrowPath.addLine(to: CGPoint(x: 459.5, y: 152.5))
        rightEyebrowPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        brows.setFill()
        rightEyebrowPath.fill()
        context.restoreGState()

        brows.setStroke()
        rightEyebrowPath.lineWidth = 1
        rightEyebrowPath.stroke()


        //// Left eyebrow Drawing
        let leftEyebrowPath = UIBezierPath()
        leftEyebrowPath.move(to: CGPoint(x: 374.5, y: 152.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 179.5, y: 125.5), controlPoint1: CGPoint(x: 374.5, y: 152.5), controlPoint2: CGPoint(x: 259.25, y: 120.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 55.5, y: 172.5), controlPoint1: CGPoint(x: 99.75, y: 130.5), controlPoint2: CGPoint(x: 55.5, y: 172.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 179.5, y: 105.5), controlPoint1: CGPoint(x: 55.5, y: 172.5), controlPoint2: CGPoint(x: 99.75, y: 114.5))
        leftEyebrowPath.addCurve(to: CGPoint(x: 374.5, y: 136.5), controlPoint1: CGPoint(x: 259.25, y: 96.5), controlPoint2: CGPoint(x: 374.5, y: 136.5))
        leftEyebrowPath.addLine(to: CGPoint(x: 374.5, y: 152.5))
        leftEyebrowPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        brows.setFill()
        leftEyebrowPath.fill()
        context.restoreGState()

        brows.setStroke()
        leftEyebrowPath.lineWidth = 1
        leftEyebrowPath.stroke()
        
        context.restoreGState()


    }




    @objc(EyesResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
